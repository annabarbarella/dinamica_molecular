import numpy as np
from matplotlib import pyplot as plt
import sys
import time
import dymol
import forcas
from matplotlib import animation

x,y,vx,vy,X,Y,l2,tmax,dt,N = dymol.initial()
theta = 2*np.pi*np.random.rand(len(x))
w = np.zeros(len(theta))
sig = 0.1
a = 3./sig
C = 1
qx = np.cos(theta)
qy = np.sin(theta)
U = qx
V = qy



fig, ax = plt.subplots(1,1)
Q = ax.quiver([], [], [], [], color='r', units='inches')
line, = ax.plot([], [],'mo', ms=15.)
ax.set_xlim(-2, X+2)
ax.set_ylim(-2, Y+2)
#Q.set_offsets(np.array([X, Y]))
t = 0
size = len(x)
q = np.c_[qx,qy]
s = 0
print x,y
#def update_quiver(num, Q, x, y,s,vx,vy,X,Y,l2,dt,N,t,q,a,C,sig,size,theta,w,qx,qy):
    
"""updates the horizontal and vertical vector components by a
fixed increment on each frame
"""
#Q = ax.quiver(X, Y, U, V)

start = time.time()
#global s,vx,vy,X,Y,l2,tmax,dt,N,fx,fy,V,R2,xnew,ynew,vlist,t,q,a,C,sig,size,theta,tau,w,qx,qy
#s += num
#print s
p = np.c_[x,y]

for i in range(0,5000):
    fx,fy,V,R2,tau = forcas.janusparticle(size,p,q,X,Y,l2,sig,a,C)
    x,y,vx,vy = dymol.integrate(x,y,vx,vy,fx,fy,dt)
    
    qx,qy, w = dymol.integrate_rot(qx,qy,w,tau,sig,dt)
    
    
    q = np.c_[qx,qy]
    t = t+dt
    x,y = dymol.period(x,y,X,Y)
    
    
    print x,y
    
    
    
    
U = qx
V = qy
#U = np.cos( num*0.1)
#V = np.sin( num*0.1)
    

Q.set_UVC(U,V)
Q.set_offsets(np.array([x, y]).T)
    
line.set_data(x,y)
#return Q,line,

# you need to set blit=False, or the first set of arrows never gets
# cleared on subsequent frames
#anim = animation.FuncAnimation(fig, update_quiver, fargs=(Q, x, y,s,vx,vy,X,Y,l2,dt,N,t,q,a,C,sig,size,theta,w,qx,qy),
#                               interval=10, blit=False)

plt.show()
